<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeup on 爆肚的杂货铺</title>
    <link>https://b40du.github.io/categories/writeup/</link>
    <description>Recent content in Writeup on 爆肚的杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sat, 04 Jul 2020 23:48:33 +0800</lastBuildDate>
    
	<atom:link href="https://b40du.github.io/categories/writeup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writeup 之 Upload-Labs 魔改flag版</title>
      <link>https://b40du.github.io/posts/writeup-chaitin-upload_labs-01/</link>
      <pubDate>Sat, 04 Jul 2020 23:48:33 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/writeup-chaitin-upload_labs-01/</guid>
      <description>今日总结：  这次靶场主要是做这个有源码的靶场，所以理解源码的含义非常重要  上传实验室-p1  第一关很简单，直接上传1.php，发现前端js报错   推测是前端js检查文件后缀类型，查看js代码，发现js对文件后缀进行了判断   个人习惯直接在控制台重写这个函数而不是用插件，直接在控制台增加.php类型   上传完成后，复制上传文件的地址   使用菜刀进行连接   查看flag   flag{a6487868}
 上传实验室-p2  由于可以查看源码，直接看源码  发现后端在判断文件类型     我们尝试发一个1.php文件，但是改了centent-type类型   发现成功上传，复制上传文件的路径   使用菜刀连接，发现flag文件   找到flag   flag{5b323cff}
 上传实验室-p3  首先我们看源码，发现很多办法都失效了   那么我们尝试用php3试试，发现成功上传，然后复制上传文件路径   连接菜刀，发现flag文件   查看flag   flag{22e47e94}
 上传实验室-p4  首先我们看源码，发现很多办法都失效了    但是.</description>
    </item>
    
  </channel>
</rss>