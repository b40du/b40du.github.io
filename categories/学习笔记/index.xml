<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on 爆肚的杂货铺</title>
    <link>https://b40du.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on 爆肚的杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Thu, 14 May 2020 23:34:19 +0800</lastBuildDate>
    
	<atom:link href="https://b40du.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>笔记-Shell基础</title>
      <link>https://b40du.github.io/posts/note-imooc-shell-basic/</link>
      <pubDate>Thu, 14 May 2020 23:34:19 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/note-imooc-shell-basic/</guid>
      <description>Shell编程（一） 一、Shell概述 1. Shell的介绍  Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。 Shell还是一个功能强大的编程语言，易编写，易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。   2. Shell的分类  Shell的两种主要语法类型有Bourne和C，这两种语法彼此不兼容。Bourne家族主要包括sh、ksh、Bash、psh、zsh；C家族主要包括：csh、tcsh。  Bourne Shell：从1979年起Unix就开始使用Bourne Shell，Bourne Shell的主文件名为sh。 C Shell：C Shell主要在BSD版的Unix系统中使用，其语法和C语言相类似而得名   查看当前系统使用的shell echo $SHELL /bin/bash  Bash：Bash与sh兼容，现在使用的Linux就是使用Bash作为用户的基本Shell  3. Linux支持的Shell  /etc/shells # 打开这个文件 [root@localhost ~]# vi /etc/shells /bin/sh /bin/bash /sbin/nologin /bin/tcsh /bin/csh [root@localhost ~]# sh sh-4.1# exit exit [root@localhost ~]# csh [root@localhost ~]# exit # 进程管理的时候可以知道我们进入了哪个shell exit # 一个shell中可以调用其他shell，也可以调用子shell [root@localhost ~]# bash # windows中打开cmd，就是在Windows当中调用一个子的shell exit   二、脚本执行方式 2.</description>
    </item>
    
    <item>
      <title>笔记-JavaScript基础</title>
      <link>https://b40du.github.io/posts/note-heima-javascript-basic/</link>
      <pubDate>Fri, 01 May 2020 16:26:46 +0800</pubDate>
      
      <guid>https://b40du.github.io/posts/note-heima-javascript-basic/</guid>
      <description>2. 初识JavaScript 目标  能够说出JavaScript是什么 能够知道JavaScript的发展历史 能够说出浏览器执行JavaScript的原理 能够说出JavaScript由哪三部分组成 能够写出JavaScript三个输入输出语句  目录  初识JavaScript JavaScript注释 JavaScript输入输出语句  2.1 初识JavaScript 2.1.1 JavaScript历史  布兰登·艾奇（BrendanEich，1961年~） 神奇的大哥在1995年利用10天完成JavaScript涉及 网景公司最初命名位LiveScript，后来在于Sun合作之后将其改名为JavaScript  2.1.2 JavaScript是什么  JavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言（Script是脚本的意思） 脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行 现在也可以基于Node.js技术进行服务器端编程  2.1.3 JavaScript的作用  表单动态校验（密码强度检测）（JS产生最初的目的） 网页特效 服务端开发（Node.js） 桌面程序（Election） App（Cordova） 控制硬件-物联网（Ruff） 游戏开发（cocos2d-js）  2.1.4 HTML/CSS/JS的关系 2.1.5 浏览器执行JS简介 浏览器分为两部分 渲染引擎 和 JS引擎
 渲染引擎：用来解析HTML与CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit JS引擎：也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8   浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。
 2.1.6 JS的组成 2.1.6.1 ECMAScript ECMAScript是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMAScript语言的实现和扩展。
ECMAScript：ECMAScript规定了JS的编程语言和基础核心知识，是所有浏览器厂商共同遵守的一套JS语言工业标准。
更多参看MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview
2.1.6.3 DOM——文档对象模型 文档对象模型（Document ObjectModel，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。
通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</description>
    </item>
    
    <item>
      <title>笔记-网络工程师</title>
      <link>https://b40du.github.io/posts/note-aqniu-network-engineer/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://b40du.github.io/posts/note-aqniu-network-engineer/</guid>
      <description>目录  第一章：计算机网络基础  计算机网络概述 OSI参考模型与TCP IP（课件有误：SQL、NFS、RPC属于会话层） 局域网基本原理 IP基本原理 TCP与UDP   第二章：网络设备操作入门  网络设备及其操作系统介绍 命令行操作基础 网络设备文件管理 网络设备文件管理-操作实验 网络设备升级操作ComwareV7msr2630 网络设备基本调试   第三章：配置局域网交换  以太网交换机工作原理 vlan配置 vlan配置-实验 生成树协议 生成树协议-实验 端口安全技术 端口安全技术-实验 配置链路聚合 配置链路聚合-实验   第四章：高级TCP/IP知识  子网划分 DNS域名系统 文件传输协议 DHCP IPv6   第五章：配置IP路由  IP路由原理 直连路由和静态路由 直连路由和静态路由-实验 路由协议概述 RIP原理 RIP原理-实验 OSPF基础 OSPF基础-实验   第六章：配置安全的分支网络  用访问控制列表实验包过滤 用访问控制列表实验包过滤-实验 网络地址转换 网络地址转换-实验   第七章：广域网连接和互联  配置HDLC 配置PPP    第一章：计算机网络基础 1.</description>
    </item>
    
  </channel>
</rss>