<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>爆肚的杂货铺</title>
    <link>https://b40du.github.io/</link>
    <description>Recent content on 爆肚的杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Tue, 14 Jul 2020 01:25:33 +0800</lastBuildDate>
    
        <atom:link href="https://b40du.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>漏洞分析 之 EFS Web Server 7.2 获取HTTP请求SEH缓冲区溢出</title>
        <link>https://b40du.github.io/posts/report-vul-efs-web-server-7.2/</link>
        <pubDate>Fri, 11 Oct 2019 16:38:33 +0800</pubDate>
        
        <guid>https://b40du.github.io/posts/report-vul-efs-web-server-7.2/</guid>
        <description>爆肚的杂货铺 https://b40du.github.io/posts/report-vul-efs-web-server-7.2/ -&lt;h1 id=&#34;1-软件简介&#34;&gt;1. 软件简介&lt;/h1&gt;
&lt;p&gt;Easy File Sharing Web Server（简易文件共享Web服务器）是一种Internet文件共享程序，允许我们在没有任何其他软件或服务的情况下托管安全的个人Web服务器。访问者可以通过Web浏览器（Internet Explorer，Netscape，Opera等）轻松上传/下载文件。&lt;/p&gt;
&lt;p&gt;因此，简单来说，它可以帮助我们与朋友或同事共享文件。这个基于Web的软件可以让我们将文件传送给任何拥有配置有浏览器的PC，而不用繁琐地安装多个软件。也可以让我们的同事或朋友轻松浏览用我的PC搭建的服务器并进行搜索，显示和/或下载经过我授予他们访问权限的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164427.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164459.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-漏洞复现&#34;&gt;2. 漏洞复现&lt;/h1&gt;
&lt;h2 id=&#34;21-软件下载&#34;&gt;2.1 软件下载&lt;/h2&gt;
&lt;p&gt;Exploit-DB漏洞库地址：https://www.exploit-db.com/exploits/39008&lt;/p&gt;
&lt;p&gt;软件下载地址：https://www.exploit-db.com/apps/60f3ff1f3cd34dec80fba130ea481f31-efssetup.exe&lt;/p&gt;
&lt;p&gt;Python下载地址：https://www.python.org/ftp/python/2.7.16/python-2.7.16.msi&lt;/p&gt;
&lt;h2 id=&#34;22-环境搭建&#34;&gt;2.2 环境搭建&lt;/h2&gt;
&lt;p&gt;安装Easy File Sharing Web Server 7.2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164606.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164720.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装成功后，打开桌面上的EFS软件，点击Try it!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，EFS Web Server已经开始运行，此时在我们的本地建立了一个Web服务器，并开启了80端口和443端口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164831.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后打开IE浏览器，在地址栏输入http://127.0.0.1/或者http://localhost/或者是EFS软件启动时显示的IP地址类型的http链接http://192.168.25.142&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508164953.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时我们可以看到，IE浏览器访问本地网页的时候，是正常显示的。&lt;/p&gt;
&lt;p&gt;如果我们的电脑没有Python环境，我们需要安装好Python环境，目的是为了方便之后我们使用Poc.py进行简易测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165027.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们检查一下Poc.py，确认无误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165055.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-软件测试&#34;&gt;2.3 软件测试&lt;/h2&gt;
&lt;p&gt;接下来我们打开cmd.exe，并使用python执行Poc.py，输入参数，看看会发生什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165159.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们刷新刚才访问的IE浏览器界面，发现网页崩溃了。同时我们发现之前搭建本地Web环境的EFS软件已经退出运行了，看来是由于服务器崩溃导致的网页崩溃，而非本地浏览器的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165234.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165311.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时基本上我们已经把漏洞复现了出来。&lt;/p&gt;
&lt;p&gt;但是我们也观察到了另外一个情况，按理说，xp系统如果程序遇到异常，会弹出一个错误对话框，并能够在其中查找到错误的类型以及内存地址，也就是Windows异常处理机制作用的显示形式。&lt;/p&gt;
&lt;p&gt;而此时此刻我们没有发现错误对话框，程序崩溃时反而直接自动退出了，因此我们需要思考一下，是不是程序的错误导致异常处理机制也产生了错误，这也是我们后面分析的一个重点。&lt;/p&gt;
&lt;h1 id=&#34;3-漏洞分析&#34;&gt;3. 漏洞分析&lt;/h1&gt;
&lt;h2 id=&#34;31-漏洞成因&#34;&gt;3.1 漏洞成因&lt;/h2&gt;
&lt;p&gt;Easy File Sharing Web Server 7.2 版本中存在缓冲区溢出漏洞。&lt;/p&gt;
&lt;p&gt;远程攻击者可发送GET数据包，由于软件中的fsws.exe在处理GET数据包的路径时，没有对路径内容进行检查，而是直接拼接传参，导致某些关键指针被覆盖，从而导致在软件使用的sqlite3.dll中执行某个函数时，由于引用了无效地址，进而触发SEH异常处理流程或覆盖SHE异常处理函数的指针，导致任意代码执行。&lt;/p&gt;
&lt;p&gt;因此，简单来说，远程攻击者可以发送GET数据包，用数据包中的长字符串利用该漏洞执行任意代码。&lt;/p&gt;
&lt;p&gt;接下来我们来回溯一下，分析该软件的详细过程。&lt;/p&gt;
&lt;h2 id=&#34;32-分析过程&#34;&gt;3.2 分析过程&lt;/h2&gt;
&lt;p&gt;首先我们附加EFS Web Server这个程序，按&lt;code&gt;g&lt;/code&gt;运行，然后用&lt;code&gt;cmd.exe&lt;/code&gt;执行我们从漏洞库下载的&lt;code&gt;Poc.py&lt;/code&gt;，发现程序中断了，产生了异常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165424.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这里执行了一个&lt;code&gt;cmp&lt;/code&gt;的汇编指令，作用是比较后面两个操作数是否相等。比较的是1个四字节指针 &lt;code&gt;[eax+4Ch]&lt;/code&gt;和&lt;code&gt;0A29A697h&lt;/code&gt;地址上的内容，那么在比较的过程中，发现&lt;code&gt;eax&lt;/code&gt;寄存器的值已经变成了&lt;code&gt;41414141&lt;/code&gt;。显然这个地址不太像一个可读的地址。&lt;/p&gt;
&lt;p&gt;那不妨查看一下&lt;code&gt;eax&lt;/code&gt;的值，在命令窗口输入&lt;code&gt;dd eax&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165502.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以看到，在输入&lt;code&gt;dd eax&lt;/code&gt;之后，发现内存空间里全部都是问号，&lt;code&gt;eax&lt;/code&gt;值是一个不可读的地址。也就是说这个是空间没有被开辟出来导致的内存访问异常。&lt;/p&gt;
&lt;p&gt;接下来我们按&lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165537.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行过后，我们发现，&lt;code&gt;eip&lt;/code&gt;指向&lt;code&gt;41414141&lt;/code&gt;，这同样是一个不可读的地址，到这个时候我们已经发现&lt;code&gt;41414141&lt;/code&gt;其实是我们之前构造的payload里面大写字母A的ASCII码。所以说，现在是由于程序的某处产生了错误，导致栈被覆盖。&lt;/p&gt;
&lt;p&gt;出现异常时，理论上程序会进入异常处理链进行异常处理，但是由于栈中的SEH链也被覆盖，导致这个链中存放的SEH异常处理函数的指针也被覆盖，因而&lt;code&gt;eip&lt;/code&gt;指向的地址是&lt;code&gt;41414141&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而在异常处理中呢，会调用这个SEH中的异常处理指针，去执行异常处理函数。那么当这个指针被覆盖的时候，调用这个指针指向的地址如果被我们所控制，就能够按照我们的想法，去执行一些代码，这也是后面漏洞利用的一种方式。&lt;/p&gt;
&lt;p&gt;那么我们现在要分析一下，为什么&lt;code&gt;[eax+0Ch]&lt;/code&gt;这个地址会被&lt;code&gt;41414141&lt;/code&gt;覆盖。这个时候我们需要使用&lt;code&gt;kb&lt;/code&gt;命令来查看一下之前堆栈调用的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165612.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在程序的异常处理流程中，调用了&lt;code&gt;ntdll.dll&lt;/code&gt;中的异常处理分发函数，而在调用这个函数之前呢，会在&lt;code&gt;sqlite3!sqlite3_declare_vtab&lt;/code&gt;中进行一个函数调用，调用&lt;code&gt;61c6286c&lt;/code&gt;地址处的&lt;code&gt;ntdll!KiUserExceptionDispatcher&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;同时，我们回想起来，之前分析&lt;code&gt;cmp&lt;/code&gt;代码命令的时候，所处的位置也是&lt;code&gt;sqlite3&lt;/code&gt;这个dll里面，那么我们要用IDA去看一下&lt;code&gt;sqlite3&lt;/code&gt;这个dll中有什么古怪。&lt;/p&gt;
&lt;p&gt;用IDA打开之后，我们按&lt;code&gt;g&lt;/code&gt;输入跳转的地址，这里我们跳转到之前&lt;code&gt;cmp&lt;/code&gt;代码发生异常的地方，该地址为&lt;code&gt;61c277f6&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，这里所处的函数是一个叫做&lt;code&gt;_sqlite3SafetyCheckOk&lt;/code&gt;的函数。那么我们通过&lt;code&gt;F5&lt;/code&gt;去看一下这个函数的伪代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165859.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么我们现在能看到，所处的这个函数呢，整体是一个if语句的判断，中间又包含着一个if语句，第二个if语句会判断&lt;code&gt;a1+76&lt;/code&gt;的值和后面的数值是否相等，如果不相等，则处理这个if语句内的函数。&lt;/p&gt;
&lt;p&gt;通过IDA可以看出，&lt;code&gt;a1&lt;/code&gt;的值，其实就是&lt;code&gt;eax&lt;/code&gt;的值，而&lt;code&gt;76&lt;/code&gt;呢，就是我们之前分析的异常错误代码中的&lt;code&gt;4Ch&lt;/code&gt;这个偏移的十进制值，那么我们关心的主要就是这个&lt;code&gt;a1&lt;/code&gt;，它此时此刻应该是一个指针，而且是已经被覆盖成&lt;code&gt;41414141&lt;/code&gt;这样的畸形字符串的指针。&lt;/p&gt;
&lt;p&gt;同时可以看出，&lt;code&gt;a1&lt;/code&gt;是从函数外部传入的一个参数，并且这个函数只有一个参数就是，那么调用这个函数的时候，&lt;code&gt;a1&lt;/code&gt;这个参数就已经是畸形字符串的值了。因此我们需要向外回溯函数，这个时候需要回溯的函数地址就是调用这个函数的&lt;code&gt;61c6286c&lt;/code&gt;这个地址，我们同样使用IDA在&lt;code&gt;sqlite3&lt;/code&gt;中跟踪到这个地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508165923.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;跳转到这个地址之后，我们关注的是上面这个&lt;code&gt;_sqlite3LockAndPrepare&lt;/code&gt;函数，因为&lt;code&gt;61c6286c&lt;/code&gt;这里记录的是一个返回地址，返回地址通常是call函数下面的那句汇编代码。所以&lt;code&gt;sqlite3SafetyCheckOk&lt;/code&gt;函数的这个&lt;code&gt;call&lt;/code&gt;调用，实际上是上面&lt;code&gt;_sqlite3LockAndPrepare&lt;/code&gt;函数对其进行的调用。&lt;/p&gt;
&lt;p&gt;同样的，我们&lt;code&gt;F5&lt;/code&gt;看一下伪代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170045.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到伪代码之后我们关注&lt;code&gt;_sqlite3SafetyCheckOk&lt;/code&gt;这个函数的参数，它同样调用了一个&lt;code&gt;a1&lt;/code&gt;，这个&lt;code&gt;a1&lt;/code&gt;来自于&lt;code&gt;_sqlite3LockAndPrepare&lt;/code&gt;这个函数的参数，我们可以看到在这个函数中，这个&lt;code&gt;a1&lt;/code&gt;并没有被赋值。也就是说，这个时候&lt;code&gt;a1&lt;/code&gt;仍旧是作为一个畸形字符串，传入了&lt;code&gt;_sqlite3LockAndPrepare&lt;/code&gt;这个函数中，那么这仍然不是我们需要定位的位置，我们需要接着往下回溯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170133.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以从输入&lt;code&gt;kb&lt;/code&gt;后的栈回溯看到，栈中还涉及到了&lt;code&gt;004968f4&lt;/code&gt;这个地址，这个地址是&lt;code&gt;fsws.exe&lt;/code&gt;这个可执行文件所调用的地址，接下来我们需要回到&lt;code&gt;fsws.exe&lt;/code&gt;这个可执行文件的领空，来看一下&lt;code&gt;004968f4&lt;/code&gt;这个地址到底执行了一些什么内容。&lt;/p&gt;
&lt;p&gt;因此我们需要通过另一个IDA来打开&lt;code&gt;fsws.exe&lt;/code&gt;这个可执行文件，打开之后，通过&lt;code&gt;jmp&lt;/code&gt;的方式，&lt;code&gt;jmp&lt;/code&gt;到&lt;code&gt;004968f4&lt;/code&gt;这个地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170252.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;跳转之后，我们仍然关注上面的&lt;code&gt;call&lt;/code&gt;调用，&lt;code&gt;sqlite3_prepare_v2&lt;/code&gt;被调用，返回地址为&lt;code&gt;004968F4&lt;/code&gt;。可以看到整个函数的名称是&lt;code&gt;sub_4968D0&lt;/code&gt;，这个函数也非常短，同样通过&lt;code&gt;F5&lt;/code&gt;的方式来看一下这个函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170329.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入这个函数以后我们关注&lt;code&gt;sqlite3_prepare_v2&lt;/code&gt;这个函数参数内的this指针，发现是由&lt;code&gt;sub_4968D0&lt;/code&gt;这个函数传入的，并且这个变量仍然没有在函数里面被赋值，也就是说在调用&lt;code&gt;sub_4968D0&lt;/code&gt;这个函数的时候，this指针仍然是被畸形字符串所覆盖的。&lt;/p&gt;
&lt;p&gt;看一下之前用&lt;code&gt;kb&lt;/code&gt;进行的堆栈回溯的调用信息，发现没有再往下的地方了。那么我们只能定位&lt;code&gt;sub_4968D0&lt;/code&gt;这个函数的入口，来看一下我们能不能得到更往前的函数的逻辑的调用。&lt;/p&gt;
&lt;p&gt;我们重新附加这个EFS Web Server软件。附加之后，我们使用&lt;code&gt;bp 4968d0&lt;/code&gt;命令，在刚才分析到的&lt;code&gt;sub_4968d0&lt;/code&gt;函数的入口地址下断，下断之后按g执行，然后发送GET包，发包之后，如果命中了刚才设置的断点，需要连续执行，直到到达最接近漏洞触发的断点的位置。并在该处进行分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170427.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在我们发送GET包。可以看到，已经第一次命中了&lt;code&gt;sub_4968d0&lt;/code&gt;这个函数的入口地址。接下来我们按&lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170452.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在已经第二次命中了&lt;code&gt;sub_4968d0&lt;/code&gt;这个函数的入口地址。接下来继续按&lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170521.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三次命中断点，继续按&lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170543.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在三次命中了我们设置的&lt;code&gt;sub_4968d0&lt;/code&gt;这个函数的入口地址之后，我们命中了一个&lt;code&gt;eax&lt;/code&gt;是异常地址值的位置，我们发现这是我们上次分析到的产生错误的地方。也就是说，第三次命中这个函数的时候，是我们最接近漏洞触发位置的时候。因此我们就从第三次命中这个函数入口地址来分析一下到底发生了什么事情。&lt;/p&gt;
&lt;p&gt;接下来我们需要再次附加这个EFS软件，附加之后我们继续使用刚才的方法，设置断点，按&lt;code&gt;g&lt;/code&gt;执行，三次断点之后达到这个最接近漏洞触发位置。然后在这个位置通过&lt;code&gt;kb&lt;/code&gt;来回溯一下堆栈调用，看看有没有之前的堆栈调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170626.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到栈回溯之后呢，我们没有看到有更上层函数的调用。也许是因为上层的调用没有标准的使用&lt;code&gt;ebp&lt;/code&gt;。这个时候我们需要分析一下，在函数入口地址处，寄存器的情况，看看有没有与畸形字符串相关的信息。我们输入&lt;code&gt;dc eax&lt;/code&gt;来观察一下&lt;code&gt;eax&lt;/code&gt;寄存器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170734.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在输入了&lt;code&gt;dc eax&lt;/code&gt;之后呢，发现&lt;code&gt;eax&lt;/code&gt;地址对应的地方存放着一个sql语句，而这个sql语句呢，有一个查询条件，查询的条件就是payload中的畸形字符串。我们发现，&lt;code&gt;esp&lt;/code&gt;与&lt;code&gt;eax&lt;/code&gt;之间的距离非常接近，说明sql语句查询的字符串就在栈上，那么这个字符串就很有可能是因为sql语句查询字符串的拼接导致的栈的溢出，从而产生漏洞。
下面我们用IDA来查找一下这个字符串，看看在IDA中这个字符串是处于一个什么样的角色，我们回到IDA然后搜索一下对应的字符串，在搜索字符串中输入&lt;code&gt;select * from %s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508170900.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b40du.me/usr/uploads/2019/11/2614621421.png&#34; alt=&#34;2019-11-07T11:17:00.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在很多地方都调用了类似的sql语句，我们需要找到和我们在WinDbg中看到的sql语句最接近的语句。显然在代码段中地址为&lt;code&gt;00497584&lt;/code&gt;处的sql语句（图3.2-19）和我们在WinDbg中看到的更相像，我们需要记下这个地址，并在后面下断点进行观察，接下来继续查找。&lt;/p&gt;
&lt;p&gt;又查找了两个sql语句之后发现这样查找需要花费很长时间，不胜其烦，索性我们查找前面的&lt;code&gt;aSelectFromSWhe&lt;/code&gt;这个常量，我们把IDA View向上翻到最顶端，从头开始搜索这个常量进行查找。
查找到两个目标sql语句后，进入了&lt;code&gt;.data&lt;/code&gt;段，因此在&lt;code&gt;fsws.exe&lt;/code&gt;这个可执行文件中一共有这两处sql语句是我们关心的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171018.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171036.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们需要记录下来这两个关键地址，分别为：&lt;code&gt;0049758A&lt;/code&gt;，&lt;code&gt;0049774E&lt;/code&gt;。我们在IDA中跟入&lt;code&gt;0049758A&lt;/code&gt;处看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171105.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以发现&lt;code&gt;sprintf&lt;/code&gt;函数的调用，这是一个很容易出问题的函数，如果不控制传入字符串的长度，极为容易造成溢出。并且在&lt;code&gt;sprintf&lt;/code&gt;的下面就是我们回溯的&lt;code&gt;sub_4968D0&lt;/code&gt;函数，进一步推测，很有可能这就是造成漏洞的位置。另一处&lt;code&gt;sprintf&lt;/code&gt;函数调用的情况也是如此，因此我们需要在这两处函数地址都下断点，看看是哪一处有机会造成漏洞。&lt;/p&gt;
&lt;p&gt;接下来我们关闭WinDbg，重新附加EFS Web Server。附加之后，在这两处&lt;code&gt;sprintf&lt;/code&gt;函数的地址下断点，下断点之后按&lt;code&gt;g&lt;/code&gt;执行，执行之后发送GET包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171147.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现断点断在&lt;code&gt;0049774e&lt;/code&gt;处，这个时候我们需要观察一下，到底是不是这处&lt;code&gt;sprintf&lt;/code&gt;执行了我们想要的字符串拼接，我们通过&lt;code&gt;dd esp&lt;/code&gt;来看一下目前栈帧的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171218.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时，我们需要通过F5来看一下我们刚才找到的那个&lt;code&gt;sprintf&lt;/code&gt;函数的伪代码，在IDA中&lt;code&gt;jmp&lt;/code&gt;到&lt;code&gt;0049774e&lt;/code&gt;，&lt;code&gt;F5&lt;/code&gt;之后发现这一处地址位置调用了5个参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171249.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们回忆一下&lt;code&gt;select * from %s where %s = %s&lt;/code&gt;这个sql语句的结构，其中我们需要关心的是包含畸形payload语句的位置，也就是第3个&lt;code&gt;%s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;sprintf&lt;/code&gt;这个函数的参数中，第5个参数，也就是&lt;code&gt;a3&lt;/code&gt;，对应的是sql语句中的第3个&lt;code&gt;%s&lt;/code&gt;，是最需要关注的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171336.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们用dc查询两个参数的地址，发现第2个参数地址&lt;code&gt;005a283c&lt;/code&gt;存放的就是&lt;code&gt;select * from %s where %s = %s&lt;/code&gt;这个查询语句，发现第5个参数地址&lt;code&gt;0012c664&lt;/code&gt;存放的就是接收到的畸形字符串的值。&lt;/p&gt;
&lt;p&gt;那么这个字符串比较的意义在哪里呢？&lt;/p&gt;
&lt;p&gt;我们回想一下，在访问网页的时候，我们发送一个GET包，实际上会在服务器端请求相应的页面。这个过程如果是一个动态的请求过程，比如&lt;code&gt;http://xxx.xxx.xxx/php?id=xxxx&lt;/code&gt;这种动态的请求过程，它就会去服务器查找对应的页面，而这个查找的过程就是字符串比较的过程。&lt;/p&gt;
&lt;p&gt;在这个过程中，EFS会执行一个&lt;code&gt;sprintf&lt;/code&gt;，进行一次字符串的拼接。那么我们不妨跟踪一下&lt;code&gt;sprintf&lt;/code&gt;函数的第一个参数地址，来看一下拼接之后会发生什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171444.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们先单步步过，执行&lt;code&gt;sprintf&lt;/code&gt;的过程，然后用&lt;code&gt;dc&lt;/code&gt;查看第一个参数的地址&lt;code&gt;01b25fd4&lt;/code&gt;，发现字符串已经完全拷贝到栈空间。接下来继续单步跟踪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171512.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现在单步跟踪几步之后呢，我们执行到了&lt;code&gt;004968d0&lt;/code&gt;这个函数的调用位置，我们来查看一下它传入的参数，传入的参数中呢，第2个参数是我们比较关心的，因为&lt;code&gt;eax&lt;/code&gt;此时存放的是已经被拼接畸形字符串的sql语句。我们通过&lt;code&gt;dc esp&lt;/code&gt;来查看一下栈空间，再查看一下第2个参数的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171547.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际上这个时候，我们关心的畸形字符串已经传入到函数中。接下来我们需要跟入这个函数（t）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171642.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入之后呢，我们需要进行单步跟踪，当进行到&lt;code&gt;004968ec&lt;/code&gt;的时候，我们会进行一次赋值操作，将&lt;code&gt;ecx&lt;/code&gt;地址指向位置存放的值交给&lt;code&gt;eax&lt;/code&gt;，实际上这是一个指针的赋值操作，我们可以看到后面的提示，&lt;code&gt;ecx&lt;/code&gt;的指向的位置&lt;code&gt;01b27058&lt;/code&gt;地址处，已经被覆盖成了&lt;code&gt;41414141&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这就是一个畸形字符串的覆盖，可以从上面寄存器的信息看出，&lt;code&gt;eax&lt;/code&gt;和&lt;code&gt;ecx&lt;/code&gt;的值是非常接近的，&lt;code&gt;eax&lt;/code&gt;是&lt;code&gt;01b25fd4&lt;/code&gt;，&lt;code&gt;ecx&lt;/code&gt;是&lt;code&gt;01b27058&lt;/code&gt;，也就是说赋值之后，如果&lt;code&gt;eax&lt;/code&gt;的值非常大，就会覆盖掉&lt;code&gt;ecx&lt;/code&gt;中对应的位置。&lt;/p&gt;
&lt;p&gt;在这里可以计算一下，&lt;code&gt;ecx – eax – len (&amp;quot;select * from %s where %s = ’%s’ &amp;quot;)&lt;/code&gt;的长度， &lt;code&gt;(01b27058-01b25fd4)(十六进制)-33(十进制)=1084(十六进制)-33(十进制)=4195个字节&lt;/code&gt;。也就是说，如果机型字符串的长度超过4195个字节，就会触发内存访问异常。&lt;/p&gt;
&lt;p&gt;下面我们通过L来增大我们可以查看到的缓冲区的大小。我们输入&lt;code&gt;dc eax L1000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171805.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到往下扩展了非常多，在GET包的位置&lt;code&gt;01b28a64&lt;/code&gt;前面，已经被覆盖了&lt;code&gt;41414141&lt;/code&gt;，而这个地址是远远大于&lt;code&gt;eax&lt;/code&gt;和&lt;code&gt;ecx&lt;/code&gt;的地址的。接下来我们单步步过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171833.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现这个时候会把赋值之后的&lt;code&gt;eax&lt;/code&gt;推入栈中。随后会调用&lt;code&gt;00510e58&lt;/code&gt;这个位置的函数，这个时候呢，&lt;code&gt;eax&lt;/code&gt;会作为第一个参数传入到这个函数中。我们通过&lt;code&gt;dd esp&lt;/code&gt;来看一下，第一个参数已经变成了畸形字符串。&lt;/p&gt;
&lt;p&gt;可以看出&lt;code&gt;004968ef&lt;/code&gt;是一个比较关键的函数调用的位置。我们进入IDA看一下伪代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171925.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时，this指针就是刚才所找到的&lt;code&gt;eax&lt;/code&gt;，&lt;code&gt;eax&lt;/code&gt;已经是一个畸形字符串，这个时候我们传入到&lt;code&gt;sqlite3_prepare_v2&lt;/code&gt;这个函数，就会执行接下来的语句。接下来单步步入看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508171956.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现步入之后，会执行一处跳转，跳转就会从我们现在的&lt;code&gt;fsws.exe&lt;/code&gt;这个可执行文件跳转到另一个&lt;code&gt;sqlite3.dll&lt;/code&gt;这个动态链接库中去处理函数。&lt;/p&gt;
&lt;p&gt;那么接下来就是我们之前已经分析的（图3.2–8）过程，在&lt;code&gt;_sqlite3LockAndPrepare&lt;/code&gt;这个函数中进行了一处安全的检查，这个检查函数是&lt;code&gt;sqlite3SafetyCheckOk&lt;/code&gt;，这个过程会调用&lt;code&gt;a1&lt;/code&gt;的指针，这个时候&lt;code&gt;a1&lt;/code&gt;的指针会作为一个畸形字符串传入，这样我们在执行&lt;code&gt;sqlite3SafetyCheckOk&lt;/code&gt;这个函数，再次做引用的时候，会引用这个畸形字符串做地址的指针，最后造成一个无效指针引用，从而引发了这个SEH异常处理，或者SEH函数的重新定位，最后达到了一个代码执行的效果。&lt;/p&gt;
&lt;h2 id=&#34;33-分析结论&#34;&gt;3.3 分析结论&lt;/h2&gt;
&lt;p&gt;我们现在可以总结一下漏洞的真正成因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://development-bj-01.oss-cn-beijing.aliyuncs.com/PicGo/20200508172201.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个漏洞成因就是在我们进行sql语句检查之前，调用了一个&lt;code&gt;sprintf&lt;/code&gt;来进行一个sql语句的拼接，拼接过程中没有对GET包的长度进行一个有效控制，而是直接传入我们&lt;code&gt;v15&lt;/code&gt;这个地址的变量中，从而导致&lt;code&gt;v4&lt;/code&gt;这个变量被覆盖，覆盖之后会直接执行&lt;code&gt;sqlite3&lt;/code&gt;这个动态链接库中的函数，执行的过程中会引用这个this指针的值，在引用的过程中造成了无效指针引用，从而产生漏洞。&lt;/p&gt;
&lt;h1 id=&#34;5-结语&#34;&gt;5. 结语&lt;/h1&gt;
&lt;p&gt;一句话简单对该漏洞进行总结：&lt;/p&gt;
&lt;p&gt;由于使用&lt;code&gt;sprintf&lt;/code&gt;格式化sql语句查询的时候对长度没有严格限制，导致缓冲区溢出。&lt;/p&gt;
&lt;p&gt;栈溢出的典型解决方法是使用微软提供的安全函数，比如安全的&lt;code&gt;sprintf&lt;/code&gt;，或者对字符串的长度进行限制。&lt;/p&gt;
&lt;h1 id=&#34;6-参考资料&#34;&gt;6. 参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bbs.pediy.com/thread-173853.htm&#34;&gt;Ddlx. 白话windows之四 异常处理机制(VEH、SEH、TopLevelEH&amp;hellip;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://b40du.github.io/posts/report-vul-efs-web-server-7.2/ - This is a customized copyright.</description>
        </item>
    
    
    
    
  </channel>
</rss> 